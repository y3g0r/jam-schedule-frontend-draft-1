// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetPostsData, GetPostsResponse, CreatePostData, CreatePostResponse, DeletePostData, DeletePostResponse, GetPostData, GetPostResponse, UpdatePostData, UpdatePostResponse, GetJamsData, GetJamsResponse, CreateJamData, CreateJamResponse, RespondToJamInviteData, RespondToJamInviteResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all posts
 */
export const getPosts = <ThrowOnError extends boolean = false>(options?: Options<GetPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostsResponse, unknown, ThrowOnError>({
        url: '/api/v1/posts',
        ...options
    });
};

/**
 * Create a new post
 */
export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePostResponse, unknown, ThrowOnError>({
        url: '/api/v1/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a post by ID
 */
export const deletePost = <ThrowOnError extends boolean = false>(options: Options<DeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostResponse, unknown, ThrowOnError>({
        url: '/api/v1/posts/{id}',
        ...options
    });
};

/**
 * Get a post by ID
 */
export const getPost = <ThrowOnError extends boolean = false>(options: Options<GetPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostResponse, unknown, ThrowOnError>({
        url: '/api/v1/posts/{id}',
        ...options
    });
};

/**
 * Update a post by ID
 */
export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdatePostResponse, unknown, ThrowOnError>({
        url: '/api/v1/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all jams
 */
export const getJams = <ThrowOnError extends boolean = false>(options?: Options<GetJamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJamsResponse, unknown, ThrowOnError>({
        url: '/api/v1/jams',
        ...options
    });
};

/**
 * Create a new jam
 */
export const createJam = <ThrowOnError extends boolean = false>(options: Options<CreateJamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateJamResponse, unknown, ThrowOnError>({
        url: '/api/v1/jams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Respond to jam invite
 */
export const respondToJamInvite = <ThrowOnError extends boolean = false>(options: Options<RespondToJamInviteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RespondToJamInviteResponse, unknown, ThrowOnError>({
        url: '/api/v1/jams/{id}/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};